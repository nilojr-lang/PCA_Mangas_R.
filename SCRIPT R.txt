# Carregar pacotes necessários
library(FactoMineR)  # Para realizar a PCA
library(factoextra) # Para visualização dos resultados
library(readxl)     # Para leitura do arquivo Excel
library(ggplot2)    # Para criar gráficos

# Carregar os dados
cat("Carregando os dados...\n")
data <- read_excel("C:/Users/55749/Desktop/PCCA - ATAULFO INVERNO.xlsx")

# Ajustar nomes das colunas (remover espaços e caracteres especiais)
cat("Ajustando nomes das colunas...\n")
names(data) <- make.names(names(data))

# Selecionar apenas as variáveis numéricas para a PCA
cat("Selecionando variáveis numéricas...\n")
variaveis <- c("O2", "CO2", "Solidos.soluveis", "Acidez.T", "SS.ACIDEZ", 
               "Materia.Seca", "Firmeza", "DA..meter", "Cor.da.Casca", 
               "mol.CO2.kg1.h1", "Corte.Negro", "Perda.de.massa", "H.da.polpa", "L.da.polpa")
data_numerica <- data[variaveis]

# Converter colunas para formato numérico
cat("Convertendo variáveis para formato numérico...\n")
data_numerica <- data.frame(lapply(data_numerica, as.numeric))

# Remover valores ausentes
cat("Removendo valores ausentes, se houver...\n")
data_numerica <- na.omit(data_numerica)

# Realizar a PCA
cat("Realizando a PCA...\n")
pca_resultado <- PCA(data_numerica, scale.unit = TRUE, graph = FALSE)

# Visualizar os resultados da PCA
cat("Visualizando os resultados da PCA...\n")

# Scree plot
fviz_eig(pca_resultado, addlabels = TRUE, ylim = c(0, 60)) +
  labs(title = "Scree plot: variância explicada", 
       x = "Componentes principais", 
       y = "Porcentagem da variância explicada") +
  theme_minimal(base_size = 14)

# Biplot com contribuições das variáveis
fviz_pca_var(pca_resultado, col.var = "contrib", 
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
  labs(title = "Análise de componentes principais (PCA): variáveis físico-químicas", 
       x = paste0("Componente principal 1 (", round(pca_resultado$eig[1, 2], 1), "%)"), 
       y = paste0("Componente principal 2 (", round(pca_resultado$eig[2, 2], 1), "%)")) +
  theme_minimal(base_size = 14) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 14, face = "bold"))

# Biplot com tratamentos
fviz_pca_ind(pca_resultado, label = "none", habillage = data$Tratamento, 
             addEllipses = TRUE, ellipse.level = 0.95) +
  labs(title = "Análise de componentes principais (PCA): tratamentos", 
       x = paste0("Componente principal 1 (", round(pca_resultado$eig[1, 2], 1), "%)"), 
       y = paste0("Componente principal 2 (", round(pca_resultado$eig[2, 2], 1), "%)")) +
  theme_minimal(base_size = 14) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 14, face = "bold"))

cat("\nCalculando correlação entre L da Polpa e Corte Negro...\n")
correlacao <- cor(data$L.da.polpa, data$Corte.Negro, use = "complete.obs")
cat("Correlação entre L da Polpa e Corte Negro: ", correlacao, "\n")

# Gráfico de dispersão para visualizar a relação entre as variáveis
cat("Criando gráfico de dispersão para L da Polpa e Corte Negro...\n")
ggplot(data, aes(x = L.da.polpa, y = Corte.Negro)) +
  geom_point() +
  geom_smooth(method = "lm", col = "blue", se = TRUE) +
  labs(title = "Relação entre L da Polpa e Corte Negro", 
       x = "L da polpa", 
       y = "Corte negro (%)") +
  theme_minimal(base_size = 14) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 14, face = "bold"))

cat("\nAnálise concluída.\n")
tiff("grafico_pca.tiff", width = 15, height = 10, units = "cm", res = 600)
fviz_pca_var(pca_resultado, col.var = "contrib",
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
  labs(title = "Análise de Componentes Principais (PCA): Variáveis Físico-Químicas", 
       x = paste0("Componente Principal 1 (", round(pca_resultado$eig[1, 2], 1), "%)"), 
       y = paste0("Componente Principal 2 (", round(pca_resultado$eig[2, 2], 1), "%)"))
dev.off()
